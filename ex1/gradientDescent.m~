function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %

    h = ((X * theta) - y);

    disp(size(X,2));

    % Store updated values in temps to ensure simultaneous update (Note using base 1...)
    % thetaj = thetaj - alpha * (1 / m) * h' * X(:,1);		Note we take h' as we are evaluating the inner product:
    % h = 97x1 vector, X(:j) = 97x1 vector (where j = 1, 2) thus h' * X = (1x97) . (97x1) = 1x1 = scalar
    temp1 = theta(1) - alpha * (1 / m) * h' * X(:,1);
    temp2 = theta(2) - alpha * (1 / m) * h' * X(:, 2);

    % All temps have been evaluated, update variables and repeat

    theta(1) = temp1;
    theta(2) = temp2;


    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
